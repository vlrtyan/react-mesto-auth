{"ast":null,"code":"export class Api {\n  constructor(_ref) {\n    let {\n      url,\n      token\n    } = _ref;\n    this.url = url;\n    this.token = token;\n    this.__getResponseData = this._getResponseData.bind(this);\n  }\n\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserData() {\n    return fetch(`${this.url}/users/me`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(this.__getResponseData);\n  }\n\n  getInitialCards() {\n    return fetch(`${this.url}/cards/`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(this.__getResponseData);\n  }\n\n  editUserData(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this.__getResponseData);\n  }\n\n  addNewItem(data) {\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this.__getResponseData);\n  }\n\n  deleteCard(data) {\n    return fetch(`${this.url}/cards/${data._id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this.__getResponseData);\n  }\n\n  changeAvatar(data) {\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this.__getResponseData);\n  }\n\n  changeLikeCardStatus(data, isLiked) {\n    if (isLiked === true) {\n      return fetch(`${this.url}/cards/${data._id}/likes`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this.token,\n          'Content-Type': 'application/json'\n        }\n      }).then(this.__getResponseData);\n    } else {\n      return fetch(`${this.url}/cards/${data._id}/likes`, {\n        method: 'PUT',\n        headers: {\n          authorization: this.token,\n          'Content-Type': 'application/json'\n        }\n      }).then(this.__getResponseData);\n    }\n  }\n\n}\nexport const api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  token: 'f7e9f27f-efd9-4384-a381-5bfd59f30ca5'\n});","map":{"version":3,"sources":["/Users/vlrtyan/dev/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","url","token","__getResponseData","_getResponseData","bind","res","ok","json","Promise","reject","status","getUserData","fetch","headers","authorization","then","getInitialCards","editUserData","name","about","method","body","JSON","stringify","addNewItem","data","link","deleteCard","_id","changeAvatar","avatar","changeLikeCardStatus","isLiked","api"],"mappings":"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","sourcesContent":["export class Api {\n    constructor({ url, token }) {\n        this.url = url;\n        this.token = token;\n        this.__getResponseData = this._getResponseData.bind(this);\n    }\n\n    _getResponseData(res) {\n        if (res.ok) {\n            return res.json();\n        } else {\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }\n    }\n\n    getUserData() {\n        return fetch(`${this.url}/users/me`, {\n            headers: {\n                authorization: this.token\n            }\n        })\n            .then(this.__getResponseData);\n    }\n\n    getInitialCards() {\n        return fetch(`${this.url}/cards/`, {\n            headers: {\n                authorization: this.token\n            }\n        })\n            .then(this.__getResponseData);\n    }\n\n    editUserData({name, about}) {\n        return fetch(`${this.url}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                about: about\n            })\n        })\n            .then(this.__getResponseData);\n    }\n\n    addNewItem(data) {\n        return fetch(`${this.url}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this.__getResponseData);\n    }\n\n    deleteCard(data) {\n        return fetch(`${this.url}/cards/${data._id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(this.__getResponseData);\n    }\n\n    changeAvatar(data) {\n        return fetch(`${this.url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this.token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: data.avatar\n            })\n        })\n            .then(this.__getResponseData);\n    }\n\n    changeLikeCardStatus(data, isLiked) {\n        if (isLiked === true) {\n            return fetch(`${this.url}/cards/${data._id}/likes`, {\n                method: 'DELETE',\n                headers: {\n                    authorization: this.token,\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(this.__getResponseData);\n        } else {\n            return fetch(`${this.url}/cards/${data._id}/likes`, {\n                method: 'PUT',\n                headers: {\n                    authorization: this.token,\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(this.__getResponseData);\n        }\n    }\n\n}\n\nexport const api = new Api({\n    url: 'https://mesto.nomoreparties.co/v1/cohort-32',\n    token: 'f7e9f27f-efd9-4384-a381-5bfd59f30ca5'\n})"]},"metadata":{},"sourceType":"module"}